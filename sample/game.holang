var DELAY_RATE = 5;

// ===== ANSI 유틸 =====
var ESC = "\u001b[";
fun color(code, s) { return ESC + code + "m" + s + ESC + "0m"; }
fun bold(s)   { return color("1", s); }
fun dim(s)    { return color("2", s); }
fun red(s)    { return color("31", s); }
fun green(s)  { return color("32", s); }
fun yellow(s) { return color("33", s); }
fun blue(s)   { return color("34", s); }
fun mag(s)    { return color("35", s); }
fun cyan(s)   { return color("36", s); }
fun gray(s)   { return color("90", s); }

fun println2(a, b) { print(a); print(b); }

// 공백 N개 만들기(중앙 정렬용)
fun spaces(n) {
  var i = 0;
  var s = "";
  while (i < n) { s = s + " "; i = i + 1; }
  return s;
}

// 중앙 정렬 라인 출력(터미널 폭 60 가정)
var WIDTH = 60;
fun centerLine(s) {
  var w = strlen(s);
  var pad = 0;
  if (w < WIDTH) { pad = (WIDTH - w) / 2; }
  print(spaces(pad) + s);
}

// ===== 입력 =====
fun askLine(prompt) { var s = input(prompt); return s; }   // 라인 입력
fun readKey() { var k = getch(); return k; }               // 단일 키

// ===== HP 바 =====
var BAR_W = 24;
fun hpBar(cur, max) {
  if (max <= 0) { return "[................--------]"; }
  var fillf = cur * BAR_W / max;
  var i = 0;
  var s = "[";
  while (i < fillf) { s = s + "#"; i = i + 1; }
  while (i < BAR_W) { s = s + "."; i = i + 1; }
  s = s + "]";
  return s;
}

// ===== 캐릭터/전투 =====
class Fighter {
  init(name, hp, atk, def) {
    this.name = name; this.hp = hp; this.maxHp = hp; this.atk = atk; this.def = def;
  }
  alive() { return this.hp > 0; }
  header() {
    centerLine(bold(cyan(this.name)));
    centerLine(gray(hpBar(this.hp, this.maxHp)));
    print(gray("HP")); print(this.hp);
  }
  take(raw) {
    var dmg = raw - this.def;
    if (dmg < 0) { dmg = 0; }
    this.hp = this.hp - dmg;
    println2(red("DMG"), dmg);
    print(gray("HP")); print(this.hp);
    return dmg;
  }
}

class Hero < Fighter {
  init(name, hp, atk, def) {
    super.init(name, hp, atk, def);
    this.shield = 0; this.pots = 0; this.amulet = false; this.gold = 0;
  }
  giveShield(v) { this.shield = v; }
  givePotion(n) { this.pots = this.pots + n; }
  giveAmulet() { this.amulet = true; }
  addGold(n) { this.gold = this.gold + n; }

  heal(v) {
    this.hp = this.hp + v;
    if (this.hp > this.maxHp) { this.hp = this.maxHp; }
    println2(green("HEAL"), v);
    print(gray("HP")); print(this.hp);
  }

  defendTake(raw) {
    var reduced = raw;
    if (this.shield > 0) {
      reduced = raw - this.shield;
      if (reduced < 0) { reduced = 0; }
    }
    return this.take(reduced + 0);
  }

  hit(target) {
    println2(yellow("ATTACK"), this.name);
    var miss = rand();
    if (miss < 0.10) { print(gray("MISS")); return 0; }
    var base = this.atk;
    var crit = rand();
    if (crit < 0.20) { print(mag("CRIT")); base = base * 1.5; }
    return target.take(base);
  }

  skill(target) {
    println2(blue("SKILL: Focus Slash"), this.name);
    var base = this.atk * 1.4 + 2;
    var save = target.def;
    target.def = target.def * 0.5;
    var dealt = target.take(base);
    target.def = save;
    return dealt;
  }

  autoPotion(threshold, amount) {
    if ((this.pots > 0) and (this.hp <= threshold)) {
      println2(green("USE POTION"), amount);
      this.pots = this.pots - 1;
      this.heal(amount);
    }
  }
}

class Mob < Fighter {
  init(name, hp, atk, def) { super.init(name, hp, atk, def); }
  act(target) {
    println2(yellow("ENEMY ATTACK"), this.name);
    var miss = rand();
    if (miss < 0.12) { print(gray("MISS")); return 0; }
    var base = this.atk;
    var crit = rand();
    if (crit < 0.10) { print(mag("CRIT")); base = base * 1.6; }
    return target.defendTake(base);
  }
}

// 전투 화면 그리기 & 한 턴 처리
fun drawFight(hero, mob, turn) {
  clear();
  centerLine(bold(green("== FIGHT ==")));
  centerLine(dim("Turn"));
  print(turn);
  print(gray("----------------------------"));
  hero.header();
  print(gray("----------------------------"));
  mob.header();
  print(gray("----------------------------"));
  print(cyan("Actions: [A]ttack  [S]kill  [P]otion  [H]elp"));
}

fun fight(hero, mob) {
  var turn = 1;
  while (hero.alive() and mob.alive()) {
    drawFight(hero, mob, turn);
    var k = readKey(); // 단일 키
    if ((k == "h") or (k == "H")) {
      clear();
      centerLine(bold(blue("HELP")));
      print(yellow("A")); print(gray("basic attack 90%, 20% crit x1.5"));
      print(blue("S"));   print(gray("skill ignores half DEF"));
      print(green("P"));  print(gray("auto potion if low"));
      sleep(DELAY_RATE * 700);
      continue;
    }
    if ((k == "p") or (k == "P")) {
      hero.autoPotion(hero.maxHp / 2, 10);
      sleep(DELAY_RATE * 300);
    }
    if ((k == "s") or (k == "S")) {
      hero.skill(mob);
    } else {
      // 기본 공격(기타 입력 포함)
      hero.hit(mob);
    }
    sleep(DELAY_RATE * 300);
    if (!mob.alive()) {
      centerLine(green("VICTORY"));
      sleep(DELAY_RATE * 600);
      return true;
    }
    mob.act(hero);
    sleep(DELAY_RATE * 300);
    if (!hero.alive()) {
      centerLine(red("YOU DIED"));
      sleep(DELAY_RATE * 800);
      return false;
    }
    turn = turn + 1;
    if (turn > 60) {
      centerLine(yellow("STALEMATE"));
      return false;
    }
  }
  return false;
}

// ===== 상태 =====
class State {
  init(hero) { this.hero = hero; this.floor = 1; }
}

// ===== 이벤트 =====
fun evTreasure(st) {
  centerLine(bold(cyan(">> TREASURE")));
  var r = randInt(4); // 0..3
  if (r == 0) {
    println2(green("FOUND GOLD"), 12);
    st.hero.addGold(12);
  }
  if (r == 1) {
    println2(green("FOUND POTION"), 1);
    st.hero.givePotion(1);
  }
  if (r == 2) {
    print(green("FOUND SHIELD +1"));
    st.hero.giveShield(1);
  }
  if (r == 3) {
    print(green("FOUND AMULET"));
    st.hero.giveAmulet();
  }
  sleep(DELAY_RATE * 600);
}

fun evTrap(st) {
  centerLine(bold(yellow(">> TRAP")));
  if (st.hero.amulet) {
    print(gray("Amulet negates the trap."));
    sleep(DELAY_RATE * 500);
    return;
  }
  var dmg = 6 + randInt(5); // 6~10
  println2(red("TRAP DMG"), dmg);
  st.hero.defendTake(dmg);
  sleep(DELAY_RATE * 600);
}

fun evShrine(st) {
  centerLine(bold(blue(">> SHRINE")));
  if (st.hero.gold >= 10) {
    print(gray("Offer 10 gold for blessing? [Y/N]"));
    var k = readKey();
    if ((k == "y") or (k == "Y")) {
      st.hero.gold = st.hero.gold - 10;
      var r = randInt(3);
      if (r == 0) {
        println2(green("BLESS: Heal"), 15);
        st.hero.heal(15);
      }
      if (r == 1) {
        println2(green("BLESS: Attack +2"), 0);
        st.hero.atk = st.hero.atk + 2;
      }
      if (r == 2) {
        print(green("BLESS: Gain Amulet"));
        st.hero.giveAmulet();
      }
      sleep(DELAY_RATE * 600);
      return;
    }
  }
  print(gray("You pray... nothing happens."));
  sleep(DELAY_RATE * 500);
}

fun evEnemy(st) {
  centerLine(bold(red(">> ENEMY")));
  var hp = 20 + randInt(10); // 20~29
  var atk = 6 + randInt(4);  // 6~9
  var def = 1 + randInt(2);  // 1~2
  var m = Mob("Ghoul", hp, atk, def);
  var ok = fight(st.hero, m);
  if (ok) {
    println2(green("LOOT GOLD"), 6);
    st.hero.addGold(6);
  }
}

fun evBoss(st) {
  clear();
  centerLine(bold(red(">> BOSS FLOOR <<")));
  sleep(DELAY_RATE * 600);
  var m = Mob("Abyss Knight", 48, 10, 3);
  var ok = fight(st.hero, m);
  if (ok) {
    centerLine(bold(green("BOSS DOWN")));
    sleep(DELAY_RATE * 700);
  }
  return ok;
}

// ===== 층 진행 =====
fun drawFloor(st) {
  clear();
  centerLine(bold(green("==== FLOOR ====")));
  print(st.floor);
  print(gray("----------------------------"));
  st.hero.header();
  print(gray("----------------------------"));
  centerLine(gray("Choose a door: [A]  [B]  [C]"));
}

fun floorLoop(st) {
  drawFloor(st);
  var d = readKey();
  if (!((d == "A") or (d == "B") or (d == "C") or (d == "a") or (d == "b") or (d == "c"))) {
    d = "A";
  }

  var r = rand(); // 0..1
  if (r < 0.35) {
    evEnemy(st);
  } else {
    if (r < 0.55) {
      evTreasure(st);
    } else {
      if (r < 0.80) {
        evShrine(st);
      } else {
        evTrap(st);
      }
    }
  }

  if (!st.hero.alive()) {
    return false;
  }

  // 층 종료: 휴식/상점
  print(gray("Rest? (+8 HP) [Y/N]"));
  var k = readKey();
  if ((k == "y") or (k == "Y")) {
    println2(green("Rest +"), 8);
    st.hero.heal(8);
  }

  print(gray("Shop: Buy potion for 10 gold? [Y/N]"));
  k = readKey();
  if ((k == "y") or (k == "Y")) {
    if (st.hero.gold >= 10) {
      st.hero.gold = st.hero.gold - 10;
      st.hero.givePotion(1);
      print(green("Bought potion."));
    } else {
      print(yellow("Not enough gold."));
    }
  }
  sleep(DELAY_RATE * 500);

  st.floor = st.floor + 1;
  return true;
}

// ===== 메인 =====
fun main() {
  clear();
  centerLine(bold(cyan("THREE DOORS")));
  centerLine(gray("5층을 돌파하고 보스를 물리치면 승리입니다."));
  centerLine(gray("각 층마다 세 개의 문 중 하나를 선택하세요."));
  centerLine(gray("안에는 적, 보물, 함정, 성소 중 하나가 있습니다."));
  centerLine(gray("체력은 휴식이나 포션으로 회복할 수 있습니다."));
  centerLine(gray("행운을 빕니다!"));
  sleep(1500);
  print(cyan("Your name? (Enter to use 'Hero')"));
  var name = askLine("> ");
  if (name == "") { name = "Hero"; }

  var hero = Hero(name, 42, 9, 2);
  var st = State(hero);

  while (st.floor <= 4) {
    var cont = floorLoop(st);
    if (!cont) {
      clear();
      centerLine(red("GAME OVER"));
      print(gray("Gold")); print(st.hero.gold);
      return;
    }
  }

  var ok = evBoss(st);
  if (ok) {
    clear();
    centerLine(bold(green("YOU WIN")));
    print(gray("Gold")); print(st.hero.gold);
    return;
  }

  clear();
  centerLine(red("GAME OVER"));
  print(gray("Gold")); print(st.hero.gold);
}

main();
